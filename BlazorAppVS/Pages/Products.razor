@page "/product"
@using BlazorAppVS.Models
@using BlazorAppVS.Services
@inject ILogger<Products> logger;
@inject IProductService productService;
@inject NavigationManager NavigationManager
@inject IJSRuntime jsruntime
@inject IToastService toastService
<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products" />
<style>
    .products-container {
        &#x20;
        display: grid !important;
        &#x20;
        grid-template-columns: repeat(auto-fill, 280px);
        &#x20;
        grid-auto-rows: auto;
        &#x20;
        grid-gap: 1rem;
    }
</style>
<button class="btn btn-dark" @onclick="@(()=>NavigationManager.NavigateTo("/addproduct"))">Add Products</button>
@if (products?.Count > 0)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.images[0]" alt="Product" loading="lazy" width="270" height="210">
                <div class="card-body">
                    <h5><b>@product.Title</b></h5>
                    <p>@product.Price?.ToString("C")</p>
                    <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))"><span class="oi oi-trash"></span></button>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
@code {
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }
    private async Task GetProducts()
    {
        products = await productService.Get();
    }
    private async Task DeleteProduct(Product product)
    {
        if (!await jsruntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.Title}?"))
            return;
        await productService.Delete(product.Id);
        toastService.ShowSuccess("Producto Eliminado");
        await GetProducts();
    }
}
